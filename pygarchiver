#!/usr/bin/python3
from argparse import ArgumentParser
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

import arcengine
import pygmodel

APP_NAME = 'PyGArchiver'

class PygWindow(Gtk.Window):

    def __init__(self):
        self.model = pygmodel.PygModel()
        self.filelist = Gtk.ListBox()

        Gtk.Window.__init__(self, title=APP_NAME)
        self.set_size_request(640, 400)
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=3)
        self.add(vbox)

        self.extract_button = self.build_extract_button()
        self.add_button = self.build_add_button()
        vbox.pack_start(self.build_toolbar(), False, False, 0)

        self.archive_name_entry = build_archive_name_entry()
        self.compress_button = self.build_compress_button()

        archive_name_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=3)
        archive_name_box.pack_start(Gtk.Label('Archive Name:'), False, False, 3)
        archive_name_box.pack_start(self.archive_name_entry, True, True, 3)
        archive_name_box.pack_start(self.compress_button, False, False, 3)

        vbox.pack_start(archive_name_box, False, True, 0)

        scrolled_window = Gtk.ScrolledWindow()
        scrolled_window.add(self.filelist)
        vbox.pack_start(scrolled_window, True, True, 0)

    def build_toolbar(self):
        toolbar = Gtk.Toolbar(toolbar_style=Gtk.ToolbarStyle.BOTH_HORIZ)
        open_button = Gtk.ToolButton.new(label='Open...')
        open_button.connect('clicked',
                            self.on_select_archive_clicked,
                            Gtk.FileChooserAction.OPEN,
                            'Select an archive')
        toolbar.insert(open_button, 0)
        toolbar.insert(self.extract_button, 1)

        create_button = Gtk.ToolButton.new(label='Create...')
        create_button.connect('clicked',
                              self.on_select_archive_clicked,
                              Gtk.FileChooserAction.SAVE,
                              'Choose a new archive name')
        toolbar.insert(create_button, 2)
        toolbar.insert(self.add_button, 3)

        return toolbar

    def build_extract_button(self):
        extract_button = Gtk.ToolButton.new(label='Extract To...')
        extract_button.set_sensitive(False)
        extract_button.connect('clicked', self.on_extract_clicked)
        return extract_button

    def build_add_button(self):
        add_button = Gtk.ToolButton.new(label='Add Files...')
        add_button.set_sensitive(False)
        add_button.connect('clicked', self.on_add_clicked)
        return add_button

    def build_compress_button(self):
        compress_button = Gtk.Button.new_with_mnemonic('_Compress')
        compress_button.set_sensitive(False)
        compress_button.connect('clicked', self.on_compress_clicked)
        return compress_button

    def on_select_archive_clicked(self, button, action, title):
        filechooser = Gtk.FileChooserNative.new(title,
                                                self,
                                                action)
        filechooser.add_filter(build_archive_filter())
        answer = filechooser.run()
        if answer == Gtk.ResponseType.CANCEL:
            return

        filename = filechooser.get_filename()
        if action == Gtk.FileChooserAction.OPEN:
            self.open_file(filename)
        else:
            self.create_file(filename)

    def on_extract_clicked(self, button):
        filechooser = Gtk.FileChooserNative.new('Select a destination',
                                                self,
                                                Gtk.FileChooserAction.SELECT_FOLDER,
                                                '_Extract',
                                                '_Cancel')
        answer = filechooser.run()
        if answer == Gtk.ResponseType.CANCEL:
            return

        destination = filechooser.get_filename()
        arcengine.extract_to(self.model.archive_file, destination)

    def on_add_clicked(self, button):
        filechooser = Gtk.FileChooserNative.new('Select files to add...',
                                                self,
                                                Gtk.FileChooserAction.OPEN)
        filechooser.set_select_multiple(True)
        answer = filechooser.run()
        if answer == Gtk.ResponseType.CANCEL:
            return

        file_list = filechooser.get_filenames()
        if file_list:
            self.compress_button.set_sensitive(True)

        for filename in file_list:
            self.show_entry(filename)
        self.model.file_list = file_list.copy()
        self.filelist.show_all()

    def on_compress_clicked(self, button):
        print('Compressing')
        arcengine.compress_files(self.model.archive_file, self.model.file_list)

    def open_file(self, filename):
        self.model.archive_file = filename
        self.clear_entries()
        self.show_entries(arcengine.get_entries(filename))
        self.extract_button.set_sensitive(True)
        self.update_archive_name()

    def create_file(self, filename):
        self.model.archive_file = filename
        self.clear_entries()
        self.update_archive_name()
        self.extract_button.set_sensitive(False)
        self.add_button.set_sensitive(True)

    def update_archive_name(self):
        title = APP_NAME
        if self.model.archive_file:
            archive_name = self.model.get_archive_name()
            self.archive_name_entry.set_text(archive_name)
            title += ' - ' + archive_name

        self.set_title(title)

    def show_entries(self, tar_entries):
        for tarinfo in tar_entries:
            self.show_entry(tarinfo.name)
        self.filelist.show_all()

    def show_entry(self, entry_text):
        row = Gtk.Label(label=entry_text)
        row.set_halign(Gtk.Align.START)
        self.filelist.add(row)

    def clear_entries(self):
        for row in self.filelist.get_children():
            self.filelist.remove(row)

def build_archive_name_entry():
    entry = Gtk.Entry()
    entry.set_editable(False)
    return entry

def build_archive_filter():
    archive_filter = Gtk.FileFilter()
    archive_filter.set_name('Archive')
    archive_filter.add_mime_type('application/x-xz')
    archive_filter.add_mime_type('application/gzip')
    archive_filter.add_mime_type('application/x-bzip2')

    return archive_filter

def main():
    parser = ArgumentParser()
    parser.add_argument('-f', '--file', dest='filename',
                        help='Open the given archive')
    args = parser.parse_args()

    pyg_window = PygWindow()
    pyg_window.connect('delete-event', Gtk.main_quit)
    pyg_window.show_all()
    if args.filename:
        pyg_window.open_file(args.filename)
    Gtk.main()


if __name__ == '__main__':
    main()
